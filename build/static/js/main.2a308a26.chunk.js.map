{"version":3,"sources":["components/information.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Information","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","date","Date","sys","hours","getHours","minutes","getMinutes","seconds","getSeconds","sunset_date","substr","setState","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSASeA,EAPK,kBAEd,6BACA,2DCMSC,EATF,SAAAC,GAAK,OAEhB,0BAAMC,SAAUD,EAAME,YACxB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,eAC3C,iDCUeC,EAdC,SAAAN,GAAK,OAEb,yBAAKO,UAAU,aAChBP,EAAMQ,MACP,6BAAK,8CAAoBR,EAAMQ,KAA1B,KAAkCR,EAAMS,SAC3C,2CAAiBT,EAAMU,KAAvB,UACA,4CAAkBV,EAAMW,SAAxB,QACA,sCAAYX,EAAMY,SAEpB,uBAAGL,UAAU,SAASP,EAAMa,SCN5BC,EAAU,mCAqGDC,E,2MAjGZC,MAAQ,CACPN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGXf,W,uCAAa,WAAOgB,GAAP,6BAAAC,EAAA,sEAELD,EAAEE,iBACAZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAH3B,SAIaC,MAAM,qDAAD,OAAsDhB,EAAtD,kBAAoEM,EAApE,kBAJlB,cAIHW,EAJG,gBAKUA,EAAQC,OALlB,OAKHC,EALG,OAOHC,EAAO,IAAIC,KAAqB,IAAhBF,EAAKG,IAAIlB,QACzBmB,EAAQH,EAAKI,WACbC,EAAU,IAAML,EAAKM,aACrBC,EAAU,IAAMP,EAAKQ,aACrBC,EAAcN,EAAQ,IAAME,EAAQK,QAAQ,GAAK,IAAMH,EAAQG,QAAQ,GAE3E,EAAKC,SAAU,CACf7B,KAAMiB,EAAKa,KAAK9B,KAChBF,KAAMmB,EAAKvB,KACXK,QAASkB,EAAKG,IAAIrB,QAClBE,SAAUgB,EAAKa,KAAK7B,SACpBC,OAAQyB,EACRxB,WAAOI,IAnBA,kDAuBL,EAAKsB,SAAU,CACX7B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,uBA7BN,0D,8HAwET,OACE,yBAAKN,UAAU,WACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBAAgB,kBAAC,EAAD,OAC/B,yBAAKA,UAAU,iBAAgB,kBAAC,EAAD,CAAML,WAAYuC,KAAKvC,aACtD,kBAAC,EAAauC,KAAKzB,gB,GA1FX0B,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a308a26.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Information = () =>\r\n (\r\n      <div>\r\n      <h1>Get Weather in Your City!</h1>\r\n      </div>\r\n    );\r\n\r\nexport default Information;\r\n","import React from \"react\";\r\n\r\nconst Form = props =>\r\n(\r\n  <form onSubmit={props.getWeather}>\r\n<input type=\"text\" name=\"city\" placeholder=\"Enter City\" />\r\n<button>Get Weather</button>\r\n  </form>\r\n)\r\n\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props =>\r\n(\r\n        <div className=\"infoWeath\">\r\n      {props.city &&\r\n      <div><p>City & Country: {props.city}, {props.country}</p>\r\n        <p>Temperature: {props.temp} °C</p>\r\n        <p>Air Pressure: {props.pressure} hpa</p>\r\n        <p>Sunset: {props.sunset}</p>\r\n      </div>}\r\n      <p className=\"error\">{props.error}</p>\r\n      </div>\r\n);\r\n\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Information from \"./components/information\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"15b50de70f339c32ce68593327c0e00a\";\n\nclass App extends React.Component {\n\n   state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n   \ngetWeather = async (e) => {\n    try {\n        e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api_url.json();\n\n      let date = new Date(data.sys.sunset*1000);\n      let hours = date.getHours();\n      let minutes = \"0\" + date.getMinutes();\n      let seconds = \"0\" + date.getSeconds();\n      let sunset_date = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n\n      this.setState ({\n      temp: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      pressure: data.main.pressure,\n      sunset: sunset_date,\n      error: undefined\n      });\n        \n    } catch (error) {\n        this.setState ({\n            temp: undefined,\n            city: undefined,\n            country: undefined,\n            pressure: undefined,\n            sunset: undefined,\n            error: \"Enter Correct City\"\n          });\n    }\n}\n  \n\n// Первоначальный вариант обработки ошибок\n\n/* getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api_url.json();\n\n        if (data.cod !== 200) {\n          this.setState ({\n            temp: undefined,\n            city: undefined,\n            country: undefined,\n            pressure: undefined,\n            sunset: undefined,\n            error: \"Enter Correct City\"\n          });\n        } else if (city) {\n\n      let date = new Date(data.sys.sunset*1000);\n      let hours = date.getHours();\n      let minutes = \"0\" + date.getMinutes();\n      let seconds = \"0\" + date.getSeconds();\n      let sunset_date = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n\n      this.setState ({\n      temp: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      pressure: data.main.pressure,\n      sunset: sunset_date,\n      error: undefined\n    });\n  }\n} */\n\n  render () {\n    return (\n      <div className=\"wrapper\">\n      <div className=\"main\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-5 info\"><Information /></div>\n          <div className=\"col-sm-7 form\"><Form getWeather={this.getWeather} />\n          <Weather  {...this.state}/></div>\n        </div>\n      </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}